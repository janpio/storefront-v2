// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["jsonProtocol"]
}

datasource db {
  provider          = "postgresql"
  url               = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl         = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
  shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING") // used for migrations
}

// users will have a web3 wallet address
model User {
  id            Int    @id @default(autoincrement())
  email         String @unique
  passkey       String // this is still using a password even though it says passkey, i got tired of fighting prisma
  role          String
  walletAddress Bytes

  kyc       Kyc[]
  orders    Order[]
  merchants Merchant[]
}

model Merchant {
  id                Int     @id @default(autoincrement())
  user              User    @relation(fields: [userId], references: [id])
  userId            Int
  settlementAddress Bytes
  orders            Order[]
}

model Kyc {
  id                Int    @id @default(autoincrement())
  userId            Int
  user              User   @relation(fields: [userId], references: [id])
  kycType           String // Can be 'Individual' or 'Entity'
  individualDetails KycI?
  entityDetails     KycE?
}

// Models for the KYC forms of type Individual, Entity and Beneficial
model KycI {
  id              Int      @id @default(autoincrement())
  kycId           Int      @unique
  kyc             Kyc      @relation(fields: [kycId], references: [id])
  firstName       String
  lastName        String
  dateOfBirth     DateTime
  ssnOrTaxId      String
  phone           String   @db.VarChar(15)
  email           String   @unique
  address1        String
  address2        String?
  zipCode         String   @db.VarChar(10)
  city            String
  state           String
  country         String
  docsAttachments String?
}

model KycE {
  id                    Int     @id @default(autoincrement())
  kycId                 Int     @unique
  kyc                   Kyc     @relation(fields: [kycId], references: [id])
  entityName            String
  entityType            String
  entityTaxId           String
  entityPhone           String  @db.VarChar(15)
  entityEmail           String  @unique
  entityAddress1        String
  entityAddress2        String?
  entityZipCode         String  @db.VarChar(10)
  entityCity            String
  entityState           String
  entityCountry         String
  entityDocsAttachments String?
  beneficials           KycB[]
}

model KycB {
  id         Int     @id @default(autoincrement())
  entityId   Int
  entity     KycE    @relation(fields: [entityId], references: [id])
  bName      String
  bType      String
  bTaxId     String
  bPhone     String  @db.VarChar(15)
  bEmail     String  @unique
  bAddress1  String
  bAddress2  String?
  bZipCode   String  @db.VarChar(10)
  bCity      String
  bState     String
  bCounty    String
  bDocuments String?
}

model Order {
  id           Int      @id @default(autoincrement())
  merchantId   Int
  merchant     Merchant @relation(fields: [merchantId], references: [id])
  userId       Int
  user         User     @relation(fields: [userId], references: [id])
  orderAmount  Float
  orderDetails Json
}
