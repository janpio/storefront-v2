// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["jsonProtocol"]
}

datasource db {
  provider          = "postgresql"
  url               = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl         = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
  shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING") // used for migrations
}

// users will have a web3 wallet address
model User {
  id            Int    @id @default(autoincrement())
  passkey       String // this is still using a password even though it says passkey, i got tired of fighting prisma
  email         String @unique
  phone         String @unique // adjust to match phone number format of type +1 (555) 555-5555 by using a custom scalar which in prisma is a string so this  
  role          String
  walletAddress Bytes

  kyc       Kyc[]
  orders    Order[]
  merchants Merchant[]
  Payment   Payment[]
}

enum Role {
  GUEST
  CUSTOMER
  MERCHANT
  OPERATOR
}

model Merchant {
  id                Int       @id @default(autoincrement())
  user              User      @relation(fields: [userId], references: [id])
  userId            Int
  settlementAddress Bytes
  orders            Order[]
  Payment           Payment[]
}

// this data is going to come from the gateway service and provided by that service api
model Kyc {
  id        Int    @id @default(autoincrement())
  userId    Int
  user      User   @relation(fields: [userId], references: [id])
  kycStatus String // Can be 'Pending', 'Approved', 'Rejected'
  kycType   String // Can be 'Individual' or 'Entity'
}

model Order {
  id          Int       @id @default(autoincrement())
  orderAmount Float
  userId      Int
  user        User      @relation(fields: [userId], references: [id])
  merchantId  Int
  merchant    Merchant  @relation(fields: [merchantId], references: [id])
  Payment     Payment[]
}

model Payment {
  id            Int       @id @default(autoincrement())
  txHash        String // this comes from the blockchain which is because of a gateway service transaction
  paymentAmount Float
  orderId       Int
  order         Order     @relation(fields: [orderId], references: [id])
  tipAmount     Float
  networkFee    Float
  serviceFee    Float
  taxAmount     Float
  user          User?     @relation(fields: [userId], references: [id])
  userId        Int?
  merchant      Merchant? @relation(fields: [merchantId], references: [id])
  merchantId    Int?
  gatewayId     Int
  gateway       Gateway   @relation(fields: [gatewayId], references: [id])
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Gateway {
  id      Int       @id @default(autoincrement())
  name    String
  version String
  Payment Payment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// CKO apis + Bridge apis will be used to create a payment 
model GatewayDetails {
  id        Int      @id @default(autoincrement())
  hasTx     String
  canTx     String
  didTx     String
  disputeTx String
  message   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Telemetry {
  id             Int    @id @default(autoincrement())
  gatewayService String
  gatewayVersion String
  smsService     String
  emailService   String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
